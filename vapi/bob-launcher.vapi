/* bob-launcher.vapi generated by valac 0.56.18-dirty, do not modify. */

namespace BobLauncher {
	namespace App {
		[CCode (cheader_filename = "bob-launcher.h", cname = "run_launcher", has_target = false)]
		public static int run_launcher (int socket_fd);
	}
	namespace BobAppInfo {
		[CCode (cheader_filename = "bob-launcher.h")]
		public static string get_string_from_group (GLib.DesktopAppInfo info, string group_name, string key);
	}
	namespace DragAndDropHandler {
	}
	namespace LayerShell {
	}
	namespace ScrollController {
	}
	namespace Strings {
		[CCode (cheader_filename = "bob-launcher.h")]
		public static string? decode_html_chars (string? input);
		[CCode (cheader_filename = "bob-launcher.h")]
		public static bool is_word_boundary (unichar c);
		[CCode (cheader_filename = "bob-launcher.h")]
		public static string? replace (string? str, string? chars, string? replacement);
	}
	namespace Threading {
		[CCode (cheader_filename = "bob-launcher.h")]
		public delegate void TaskFunc ();
		[CCode (cheader_filename = "bob-launcher.h")]
		public static int atomic_dec (ref int ptr);
		[CCode (cheader_filename = "stdatomic.h", cname = "atomic_exchange", has_type_id = false)]
		public static int atomic_exchange (ref int ptr, int value);
		[CCode (cheader_filename = "bob-launcher.h")]
		public static int atomic_inc (ref int ptr);
		[CCode (cheader_filename = "stdatomic.h", cname = "atomic_load", has_type_id = false)]
		public static int atomic_load (ref int ptr);
		[CCode (cheader_filename = "bob-launcher.h")]
		public static void atomic_store (ref int ptr, int value);
		[CCode (cheader_filename = "stdatomic.h", cname = "atomic_compare_exchange_strong", has_type_id = false)]
		public static bool cas (ref int ptr, ref int expected, int value);
		[CCode (cheader_filename = "bob-launcher.h")]
		public static void join (ulong thread_id);
		[CCode (cheader_filename = "immintrin.h", cname = "_mm_pause", has_type_id = false)]
		public static void pause ();
		[CCode (cheader_filename = "bob-launcher.h")]
		public static void run (owned BobLauncher.Threading.TaskFunc task);
		[CCode (cheader_filename = "bob-launcher.h")]
		public static ulong spawn_joinable (owned BobLauncher.Threading.TaskFunc task);
	}
	namespace Utils {
		[CCode (cheader_filename = "bob-launcher.h")]
		public static string format_modification_time (GLib.DateTime now, GLib.DateTime mod_time);
		[CCode (cheader_filename = "bob-launcher.h")]
		public static string get_thumbnail_path (string file_path, int size);
		[CCode (cheader_filename = "bob-launcher.h")]
		public static bool is_all_lowercase (string str);
		[CCode (cheader_filename = "bob-launcher.h")]
		public static void launch_app (GLib.AppInfo app_info);
		[CCode (cheader_filename = "bob-launcher.h")]
		public static bool launch_file (GLib.File file);
		[CCode (cheader_filename = "bob-launcher.h")]
		public static void launch_uri (string uri);
		[CCode (cheader_filename = "bob-launcher.h")]
		public static void open_command_line (string command, string? app_name = null, bool needs_terminal = false, string? working_dir = null);
	}
	[CCode (cheader_filename = "bob-launcher.h")]
	public abstract class Action : BobLauncher.Match {
		protected Action ();
		protected abstract bool do_execute (BobLauncher.Match source, BobLauncher.Match? target = null);
		public virtual bool execute (BobLauncher.Match source, BobLauncher.Match? target = null);
		public abstract BobLauncher.Score get_relevancy (BobLauncher.Match m);
	}
	[CCode (cheader_filename = "bob-launcher.h")]
	public abstract class ActionTarget : BobLauncher.Action {
		protected ActionTarget ();
	}
	[CCode (cheader_filename = "bob-launcher.h")]
	public class BobLaunchContext : GLib.Object {
		public static unowned BobLauncher.BobLaunchContext get_instance ();
		public bool launch_app (GLib.AppInfo app_info, bool needs_terminal = false, string? action = null);
		public bool launch_app_with_files (GLib.AppInfo app_info, GLib.List<GLib.File> files, string? action = null);
		public bool launch_command (string identifier, string[] argv, bool blocking = false, bool needs_terminal = false);
		public bool launch_file (GLib.File file);
		public bool launch_uri (string uri);
		public bool launch_with_uri (GLib.AppInfo app_info, string uri, string? action = null);
	}
	[CCode (cheader_filename = "bob-launcher.h")]
	public class Description : GLib.Object {
		public Pango.AttrList? attributes;
		public GLib.GenericArray<BobLauncher.Description>? children;
		public string css_class;
		public BobLauncher.FragmentFunc? fragment_func;
		public BobLauncher.FragmentType fragment_type;
		public Gtk.Orientation orientation;
		public string text;
		public const int spacing;
		public Description (string text, string css_class, BobLauncher.FragmentType fragment_type = FragmentType.TEXT, owned BobLauncher.FragmentFunc? fragment_func = null, Pango.AttrList? attrs = null);
		public void add_child (BobLauncher.Description child);
		public Description.container (string css_class = "", Gtk.Orientation orientation = Gtk.Orientation.HORIZONTAL);
	}
	[CCode (cheader_filename = "bob-launcher.h")]
	public class FileMatch : BobLauncher.Match, BobLauncher.IFile, BobLauncher.IRichDescription {
		public const string SEARCH_FILE_ATTRIBUTES;
		protected override void dispose ();
		public FileMatch.from_path (string filename);
		public FileMatch.from_uri (string uri);
		public static BobLauncher.Description generate_description_for_file (Levensteihn.StringInfo si, string file_path, GLib.DateTime? timestamp);
		public override string get_description ();
		public override string get_icon_name ();
		public override string get_title ();
		public override unowned Gtk.Widget? get_tooltip ();
		public static GLib.GenericArray<string> split_path_with_separators (string path);
		public string filename { get; construct; }
		public GLib.DateTime timestamp { get; set; }
	}
	[CCode (cheader_filename = "bob-launcher.h")]
	public abstract class Match : GLib.Object {
		protected Match ();
		public abstract string get_description ();
		public abstract string get_icon_name ();
		public abstract string get_title ();
		public virtual unowned Gtk.Widget? get_tooltip ();
	}
	[CCode (cheader_filename = "bob-launcher.h")]
	public class PaintableWidgetWrapper : Gtk.Widget {
		public PaintableWidgetWrapper ();
		protected override void dispose ();
		public override Gtk.SizeRequestMode get_request_mode ();
		public Gdk.Paintable? icon_to_paintable (GLib.Icon icon, int size = 256);
		public void load ();
		public override void measure (Gtk.Orientation orientation, int for_size, out int minimum, out int natural, out int minimum_baseline, out int natural_baseline);
		public override void snapshot (Gtk.Snapshot snapshot);
		public GLib.File file { get; construct; }
		public GLib.FileInfo file_info { get; set construct; }
	}
	[CCode (cheader_filename = "bob-launcher.h")]
	public abstract class PluginBase : BobLauncher.Match {
		protected string icon_name;
		protected PluginBase ();
		public virtual bool activate ();
		public virtual void deactivate ();
		public virtual void find_for_match (BobLauncher.Match match, ActionSet rs);
		public override string get_description ();
		public override string get_icon_name ();
		public string get_mime_type ();
		public override string get_title ();
		public virtual bool handle_base_settings (GLib.Settings settings, string key);
		public virtual void on_setting_changed (string key, GLib.Variant value);
		public virtual string to_string ();
		public int16 bonus { get; set; }
		public bool enabled { get; set; }
		public virtual GLib.GenericArray<BobLauncher.SearchBase> search_providers { get; set; }
	}
	[CCode (cheader_filename = "bob-launcher.h")]
	public abstract class SearchBase : BobLauncher.PluginBase {
		protected SearchBase ();
		protected override bool handle_base_settings (GLib.Settings settings, string key);
		protected virtual void search (BobLauncher.ResultContainer rs);
		public virtual void search_shard (BobLauncher.ResultContainer rs, uint shard_id);
		public GLib.Regex compiled_regex { get; }
		public bool enabled_in_default_search { get; set; }
		public virtual bool prefer_insertion_order { get; }
		public string regex_match { get; set; }
		public virtual uint shard_count { get; set; }
		public uint update_interval { get; set; }
	}
	[CCode (cheader_filename = "bob-launcher.h")]
	public abstract class SourceMatch : BobLauncher.Match {
		protected SourceMatch ();
		public signal void executed (bool success);
	}
	[CCode (cheader_filename = "bob-launcher.h")]
	public class UnknownMatch : BobLauncher.Match {
		public UnknownMatch (string query_string);
		public override string get_description ();
		public override string get_icon_name ();
		public string get_mime_type ();
		public override string get_title ();
	}
	[CCode (cheader_filename = "bob-launcher.h")]
	public interface IActionMatch : GLib.Object {
		public abstract bool do_action ();
	}
	[CCode (cheader_filename = "bob-launcher.h")]
	public interface IDesktopApplication : GLib.Object {
		public abstract unowned GLib.GenericArray<BobLauncher.Action> get_actions ();
		public abstract unowned GLib.DesktopAppInfo get_desktop_appinfo ();
		public abstract bool needs_terminal ();
	}
	[CCode (cheader_filename = "bob-launcher.h")]
	public interface IFile : GLib.Object {
		public abstract GLib.File get_file ();
		public abstract string get_file_path ();
		public abstract string get_mime_type ();
		public abstract string get_uri ();
	}
	[CCode (cheader_filename = "bob-launcher.h")]
	public interface IRichDescription : BobLauncher.Match {
		public abstract unowned BobLauncher.Description get_rich_description (Levensteihn.StringInfo si);
	}
	[CCode (cheader_filename = "bob-launcher.h")]
	public interface ITextMatch : GLib.Object {
		public abstract string get_text ();
	}
	[CCode (cheader_filename = "bob-launcher.h")]
	public interface IURLMatch : GLib.Object {
		public abstract string get_url ();
	}
	[CCode (cheader_filename = "bob-launcher.h")]
	public struct Score : int16 {
	}
	[CCode (cheader_filename = "bob-launcher.h")]
	public enum FragmentType {
		IMAGE,
		TEXT,
		CONTAINER
	}
	[CCode (cheader_filename = "bob-launcher.h")]
	public delegate void FragmentFunc () throws GLib.Error;
	[CCode (cheader_filename = "bob-launcher.h")]
	public const string BOB_LAUNCHER_APP_ID;
	[CCode (cheader_filename = "bob-launcher.h")]
	public const string BOB_LAUNCHER_OBJECT_PATH;
}
namespace Props {
	[CCode (cheader_filename = "access-appinfo-props.h", cname = "g_desktop_app_info_get_string_from_group", has_type_id = false)]
	public static string? desktop_app_info_get_string_from_group (GLib.DesktopAppInfo info, string group_name, string key);
}
namespace PluginLoader {
	[CCode (cheader_filename = "bob-launcher.h")]
	public static int alpha_comp (BobLauncher.PluginBase a, BobLauncher.PluginBase b);
	[CCode (cheader_filename = "bob-launcher.h")]
	public static ulong initialize_plugin (BobLauncher.PluginBase plg, GLib.Settings settings);
	[CCode (cheader_filename = "bob-launcher.h")]
	public static int shard_comp (BobLauncher.SearchBase? a, BobLauncher.SearchBase? b);
}
namespace CSS {
}
namespace InputRegion {
}
