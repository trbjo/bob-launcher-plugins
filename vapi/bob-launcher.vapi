/* bob-launcher.vapi generated by valac 0.56.18, do not modify. */

namespace BobLauncher {
	namespace DragAndDropHandler {
	}
	namespace IconCacheService {
		[CCode (cheader_filename = "bob-launcher.h")]
		public static string best_icon_name_for_mime_type (string? content_type);
		[CCode (cheader_filename = "bob-launcher.h")]
		public static unowned Gdk.Paintable get_paintable_for_icon_name (string icon_name, int size, int scale);
	}
	namespace LayerShell {
	}
	namespace ScrollController {
	}
	namespace Strings {
		[CCode (cheader_filename = "bob-launcher.h")]
		public static string? decode_html_chars (string? input);
		[CCode (cheader_filename = "bob-launcher.h")]
		public static bool is_word_boundary (unichar c);
		[CCode (cheader_filename = "bob-launcher.h")]
		public static string? replace (string? str, string? chars, string? replacement);
	}
	namespace Threading {
		[CCode (cheader_filename = "bob-launcher.h")]
		public delegate void TaskFunc ();
		[CCode (cheader_filename = "bob-launcher.h")]
		public static int atomic_dec (ref int ptr);
		[CCode (cheader_filename = "stdatomic.h", cname = "atomic_exchange", has_type_id = false)]
		public static int atomic_exchange (ref int ptr, int value);
		[CCode (cheader_filename = "bob-launcher.h")]
		public static int atomic_inc (ref int ptr);
		[CCode (cheader_filename = "stdatomic.h", cname = "atomic_load", has_type_id = false)]
		public static int atomic_load (ref int ptr);
		[CCode (cheader_filename = "bob-launcher.h")]
		public static void atomic_store (ref int ptr, int value);
		[CCode (cheader_filename = "stdatomic.h", cname = "atomic_compare_exchange_strong", has_type_id = false)]
		public static bool cas (ref int ptr, ref int expected, int value);
		[CCode (cheader_filename = "bob-launcher.h")]
		public static void join (uint64 thread_id);
		[CCode (cheader_filename = "immintrin.h", cname = "_mm_pause", has_type_id = false)]
		public static void pause ();
		[CCode (cheader_filename = "bob-launcher.h")]
		public static void run (owned BobLauncher.Threading.TaskFunc task);
		[CCode (cheader_filename = "bob-launcher.h")]
		public static uint64 spawn_joinable (owned BobLauncher.Threading.TaskFunc task);
	}
	namespace Utils {
		[CCode (cheader_filename = "bob-launcher.h")]
		public static string format_modification_time (GLib.DateTime now, GLib.DateTime mod_time);
		[CCode (cheader_filename = "bob-launcher.h")]
		public static string get_thumbnail_path (string file_path, int size);
		[CCode (cheader_filename = "bob-launcher.h")]
		public static bool is_all_lowercase (string str);
		[CCode (cheader_filename = "bob-launcher.h")]
		public static void launch_app (GLib.AppInfo app_info);
		[CCode (cheader_filename = "bob-launcher.h")]
		public static bool launch_file (GLib.File file);
		[CCode (cheader_filename = "bob-launcher.h")]
		public static void launch_uri (string uri);
		[CCode (cheader_filename = "bob-launcher.h")]
		public static void open_command_line (string command, string? app_name = null, bool needs_terminal = false, string? working_dir = null);
	}
	[CCode (cheader_filename = "bob-launcher.h")]
	public abstract class Action : BobLauncher.Match {
		protected Action ();
		protected abstract bool do_execute (BobLauncher.Match source, BobLauncher.Match? target = null);
		public virtual bool execute (BobLauncher.Match source, BobLauncher.Match? target = null);
		public abstract BobLauncher.Score get_relevancy (BobLauncher.Match m);
	}
	[CCode (cheader_filename = "bob-launcher.h")]
	public abstract class ActionTarget : BobLauncher.Action {
		protected ActionTarget ();
	}
	[CCode (cheader_filename = "bob-launcher.h")]
	public class Description {
		public BobLauncher.FragmentFunc? fragment_func;
		public BobLauncher.FragmentType fragment_type;
		public string text;
		public Description (string text, BobLauncher.FragmentType fragment_type = FragmentType.TEXT, owned BobLauncher.FragmentFunc? fragment_func = null);
	}
	[CCode (cheader_filename = "bob-launcher.h")]
	public class FileMatch : BobLauncher.Match, BobLauncher.IFile, BobLauncher.IRichDescription {
		public FileMatch.from_path (string filename);
		public FileMatch.from_uri (string uri);
		public static GLib.GenericArray<BobLauncher.Description> generate_description_for_file (Levensteihn.StringInfo si, string file_path);
		public override string get_description ();
		public override string get_icon_name ();
		public override string get_title ();
		public static GLib.GenericArray<string> split_path_with_separators (string path);
		public string filename { get; construct; }
	}
	[CCode (cheader_filename = "bob-launcher.h")]
	public class FragmentAction : GLib.Object {
		public BobLauncher.FragmentFunc func;
		public FragmentAction (owned BobLauncher.FragmentFunc func);
	}
	[CCode (cheader_filename = "bob-launcher.h")]
	public abstract class Match : GLib.Object {
		protected Match ();
		public abstract string get_description ();
		public abstract string get_icon_name ();
		public abstract string get_title ();
		public virtual Gtk.Widget? get_tooltip ();
	}
	[CCode (cheader_filename = "bob-launcher.h")]
	public abstract class PluginBase : BobLauncher.Match {
		public delegate void SettingsCallback (GLib.Cancellable cancellable);
		protected string description;
		protected string icon_name;
		protected string title;
		protected PluginBase ();
		protected virtual bool activate (GLib.Cancellable cancellable);
		protected virtual void deactivate ();
		public virtual void find_for_match (BobLauncher.Match match, ActionSet rs);
		public override string get_description ();
		public override string get_icon_name ();
		public string get_mime_type ();
		public override string get_title ();
		protected virtual bool handle_base_settings (GLib.Settings settings, string key);
		public virtual ulong initialize (GLib.Settings settings);
		public bool is_enabled ();
		protected virtual BobLauncher.PluginBase.SettingsCallback? on_setting_changed (string key, GLib.Variant value);
		public virtual void on_setting_initialized (string key, GLib.Variant value);
		public void shutdown ();
		public virtual string to_string ();
		public double bonus { get; set; }
	}
	[CCode (cheader_filename = "bob-launcher.h")]
	public abstract class SearchAction : BobLauncher.SearchBase {
		protected SearchAction ();
		protected override bool handle_base_settings (GLib.Settings settings, string key);
	}
	[CCode (cheader_filename = "bob-launcher.h")]
	public abstract class SearchBase : BobLauncher.PluginBase {
		protected SearchBase ();
		protected override bool handle_base_settings (GLib.Settings settings, string key);
		protected virtual void search (BobLauncher.ResultContainer rs);
		public virtual void search_shard (BobLauncher.ResultContainer rs, uint shard_id);
		public uint char_threshold { get; set; }
		public bool enabled_in_default_search { get; set; }
		public virtual uint shard_count { get; set; }
		public uint update_interval { get; set; }
	}
	[CCode (cheader_filename = "bob-launcher.h")]
	public abstract class SourceMatch : BobLauncher.Match {
		protected SourceMatch ();
		public signal void executed ();
	}
	[CCode (cheader_filename = "bob-launcher.h")]
	public class UnknownMatch : BobLauncher.Match {
		public UnknownMatch (string query_string);
		public override string get_description ();
		public override string get_icon_name ();
		public string get_mime_type ();
		public override string get_title ();
	}
	[CCode (cheader_filename = "bob-launcher.h")]
	public interface IActionMatch : GLib.Object {
		public abstract void do_action ();
	}
	[CCode (cheader_filename = "bob-launcher.h")]
	public interface IDesktopApplication : GLib.Object {
		public abstract unowned GLib.GenericArray<BobLauncher.Action> get_actions ();
		public abstract unowned GLib.DesktopAppInfo get_desktop_appinfo ();
		public abstract bool needs_terminal ();
	}
	[CCode (cheader_filename = "bob-launcher.h")]
	public interface IFile : GLib.Object {
		public abstract GLib.File get_file ();
		public abstract string get_file_path ();
		public abstract string get_mime_type ();
		public abstract string get_uri ();
	}
	[CCode (cheader_filename = "bob-launcher.h")]
	public interface IRichDescription : BobLauncher.Match {
		public abstract unowned GLib.GenericArray<BobLauncher.Description> get_rich_description (Levensteihn.StringInfo si);
	}
	[CCode (cheader_filename = "bob-launcher.h")]
	public interface ITextMatch : GLib.Object {
		public abstract string get_text ();
	}
	[CCode (cheader_filename = "bob-launcher.h")]
	public interface IURLMatch : GLib.Object {
		public abstract string get_url ();
	}
	[CCode (cheader_filename = "bob-launcher.h")]
	public struct Score : double {
	}
	[CCode (cheader_filename = "bob-launcher.h")]
	public enum FragmentType {
		IMAGE,
		TEXT
	}
	[CCode (cheader_filename = "bob-launcher.h")]
	public delegate void FragmentFunc () throws GLib.Error;
	[CCode (cheader_filename = "bob-launcher.h")]
	public delegate void SettingsCallback (GLib.Cancellable cancellable);
	[CCode (cheader_filename = "bob-launcher.h")]
	public const string BOB_LAUNCHER_APP_ID;
	[CCode (cheader_filename = "bob-launcher.h")]
	public const string BOB_LAUNCHER_OBJECT_PATH;
	[CCode (cheader_filename = "bob-launcher.h", cname = "run_launcher", has_target = false)]
	public static int run_launcher (int argc, char** argv);
}
namespace MatchScore {
	[CCode (cheader_filename = "bob-launcher.h")]
	public const double ABOVE_AVERAGE;
	[CCode (cheader_filename = "bob-launcher.h")]
	public const double ABOVE_THRESHOLD;
	[CCode (cheader_filename = "bob-launcher.h")]
	public const double AVERAGE;
	[CCode (cheader_filename = "bob-launcher.h")]
	public const double BELOW_AVERAGE;
	[CCode (cheader_filename = "bob-launcher.h")]
	public const double BELOW_THRESHOLD;
	[CCode (cheader_filename = "bob-launcher.h")]
	public const double DECREMENT_MAJOR;
	[CCode (cheader_filename = "bob-launcher.h")]
	public const double DECREMENT_MEDIUM;
	[CCode (cheader_filename = "bob-launcher.h")]
	public const double DECREMENT_MINOR;
	[CCode (cheader_filename = "bob-launcher.h")]
	public const double EXCELLENT;
	[CCode (cheader_filename = "bob-launcher.h")]
	public const double GOOD;
	[CCode (cheader_filename = "bob-launcher.h")]
	public const double HIGHEST;
	[CCode (cheader_filename = "bob-launcher.h")]
	public const double INCREMENT_HUGE;
	[CCode (cheader_filename = "bob-launcher.h")]
	public const double INCREMENT_LARGE;
	[CCode (cheader_filename = "bob-launcher.h")]
	public const double INCREMENT_MEDIUM;
	[CCode (cheader_filename = "bob-launcher.h")]
	public const double INCREMENT_MINOR;
	[CCode (cheader_filename = "bob-launcher.h")]
	public const double INCREMENT_SMALL;
	[CCode (cheader_filename = "bob-launcher.h")]
	public const double LOWEST;
	[CCode (cheader_filename = "bob-launcher.h")]
	public const double NONE;
	[CCode (cheader_filename = "bob-launcher.h")]
	public const double PRETTY_HIGH;
	[CCode (cheader_filename = "bob-launcher.h")]
	public const double THRESHOLD;
	[CCode (cheader_filename = "bob-launcher.h")]
	public const double TIEBREAKER;
	[CCode (cheader_filename = "bob-launcher.h")]
	public const double VERY_GOOD;
}
namespace DataSink {
}
namespace PluginLoader {
}
namespace CSS {
}
namespace InputRegion {
}
